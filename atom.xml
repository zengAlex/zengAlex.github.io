<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tcspin&#39;blog</title>
  <subtitle>望不负期盼</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//blog.tcspin.com/"/>
  <updated>2016-12-14T15:31:17.000Z</updated>
  <id>//blog.tcspin.com/</id>
  
  <author>
    <name>canxin Zeng</name>
    <email>zengcanxin92@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gulp-css-sprite</title>
    <link href="//blog.tcspin.com/2016/12/14/gulp-css-sprite/"/>
    <id>//blog.tcspin.com/2016/12/14/gulp-css-sprite/</id>
    <published>2016-12-14T15:21:00.000Z</published>
    <updated>2016-12-14T15:31:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-先建立好目录文件夹，例如我的在build-下"><a href="#1-先建立好目录文件夹，例如我的在build-下" class="headerlink" title="1. 先建立好目录文件夹，例如我的在build 下"></a>1. 先建立好目录文件夹，例如我的在build 下</h3><h3 id="2-建立一个package-json-文件"><a href="#2-建立一个package-json-文件" class="headerlink" title="2.建立一个package.json 文件"></a>2.建立一个package.json 文件</h3><pre><code>（前提是你已经全局安装好了node和全局安装了gulp),你也可以npm init 到该目录下，他会有些选项要你添，填完到保存，就会自动生成一个package.json
</code></pre><h3 id="3-建立gulpfile-js"><a href="#3-建立gulpfile-js" class="headerlink" title="3.  建立gulpfile.js"></a>3.  建立gulpfile.js</h3><pre><code>gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件（你也可以k将gulpfile.js放入其他文件夹下亦可）。  
</code></pre><p>1.合并img 文件夹下到所有icon 小图标 </p>
<pre><code>首先在gulpfile.js 里面引入gulp 和 gulp.spritesmith, 贴上代码

 //gulpfile.js
var gulp = require(&apos;gulp&apos;);
var spritesmith = require(&apos;gulp.spritesmith&apos;);

// 合并压缩成雪碧图
gulp.task(&apos;spritesmith&apos;, function() {
    return gulp.src(&apos;../source/img/imgsprite/*.png&apos;)//需要合并的图片地址
        .pipe(spritesmith({
            imgName: &apos;sprite.png&apos;,//保存合并后图片的名字
            cssName: &apos;sprite.css&apos;,//保存合并后对于css样式的地址
            padding: 5,//合并时两个图片的间距
            algorithm: &apos;top-down&apos;
        }))
        .pipe(gulp.dest(&apos;../dist/images/&apos;)); // 输出到
});
</code></pre><blockquote>
<p>gulp.spritesmith - api 这里我就简单的说下，详细的自己去看下 <a href="https://github.com/twolfson/gulp.spritesmith" target="_blank" rel="external">地址</a></p>
</blockquote>
<pre><code>imgName 和 cssName 分别表示你合并后点文件名字
padding 则表示雪碧图里面每个icon 相距的位置

algorithm：他有5个方向 如下图
</code></pre><p><img src="/assets/blogImg/gulpcsssprite.jpeg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-先建立好目录文件夹，例如我的在build-下&quot;&gt;&lt;a href=&quot;#1-先建立好目录文件夹，例如我的在build-下&quot; class=&quot;headerlink&quot; title=&quot;1. 先建立好目录文件夹，例如我的在build 下&quot;&gt;&lt;/a&gt;1. 先建立好目录文件夹，
    
    </summary>
    
    
      <category term="前端自动化" scheme="//blog.tcspin.com/tags/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>学习 http</title>
    <link href="//blog.tcspin.com/2016/12/04/http-Knowledge/"/>
    <id>//blog.tcspin.com/2016/12/04/http-Knowledge/</id>
    <published>2016-12-04T06:12:00.000Z</published>
    <updated>2016-12-08T12:01:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o8cnml828.bkt.clouddn.com/727407702.jpg" alt="http"></p>
<p>1 常见的http 方法</p>
<table>
<thead>
<tr>
<th style="text-align:left">get</th>
<th style="text-align:center">post</th>
<th style="text-align:center">put</th>
<th style="text-align:center">head</th>
<th style="text-align:center">delete</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<p>2 常见的状态码</p>
<table>
<thead>
<tr>
<th style="text-align:right">200</th>
<th style="text-align:right">表示成功，文档正确返回</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">203</td>
<td style="text-align:right">Redirect －重定向，需要的到其它地方去获取这个资源｜</td>
</tr>
<tr>
<td style="text-align:right">404</td>
<td style="text-align:right">not found，无法获取资源｜</td>
</tr>
</tbody>
</table>
<blockquote>
<p>状态码分类</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">整体范围</th>
<th style="text-align:center">已定义范围</th>
<th style="text-align:center">分类</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">100~199</td>
<td style="text-align:center">100~101</td>
<td style="text-align:center">信息提示</td>
</tr>
<tr>
<td style="text-align:center">200～299｜200~206</td>
<td style="text-align:center">成功</td>
</tr>
<tr>
<td style="text-align:center">300~399</td>
<td style="text-align:center">300~305</td>
<td style="text-align:center">重定向</td>
</tr>
<tr>
<td style="text-align:center">400~499</td>
<td style="text-align:center">400~415</td>
<td style="text-align:center">客户端错误</td>
</tr>
<tr>
<td style="text-align:center">500~599</td>
<td style="text-align:center">500~505</td>
<td style="text-align:center">服务器错误</td>
</tr>
</tbody>
</table>
<p>3 报文</p>
<table>
<thead>
<tr>
<th style="text-align:right">request message(请求报文)</th>
<th style="text-align:right">由web客户端发往服务器端</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">response message(响应报文)</td>
<td style="text-align:right">由服务器端发往客户端的报文</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o8cnml828.bkt.clouddn.com/727407702.jpg&quot; alt=&quot;http&quot;&gt;&lt;/p&gt;
&lt;p&gt;1 常见的http 方法&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:
    
    </summary>
    
    
      <category term="http" scheme="//blog.tcspin.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>pc-window-open</title>
    <link href="//blog.tcspin.com/2016/12/01/pc-window-open/"/>
    <id>//blog.tcspin.com/2016/12/01/pc-window-open/</id>
    <published>2016-12-01T11:50:00.000Z</published>
    <updated>2016-12-01T16:05:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o8cnml828.bkt.clouddn.com/qq,wechat_loginimg.png" alt="icon"></p>
<p>使用window.open(URL,name,features,replace);<a href="http://www.w3school.com.cn/jsref/met_win_open.asp" target="_blank" rel="external">W3C地址</a>;</p>
<pre><code>用window.open()打开的页面即是这个页面的子页面，他们父子间可以相互执行函数方法。
</code></pre><p>记得上次有个师弟问我，说怎么解决他登录后跳到成功页面，切刷新父窗口。</p>
<p>我就简单的说下我们这边是怎么实现：</p>
<p> 1.图片的登录按钮都是一个a 标签， 页面有有后台（我们是用PHP:tal）给的制定的跳转地址<br>    例如微信： window.open(window.wechat_url,””,”channelmode=yes”);</p>
<p>2.跳转到了这个有二维码的页面后，由后台监听是否成功，如果成功则跳转到一个写有控制父层函数的页面上去.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!--关闭子窗口并刷新父窗口--&gt;</div><div class="line">&lt;script language="JavaScript"&gt; </div><div class="line">	(function() &#123;</div><div class="line">		window.opener.location.href = window.opener.location.href;     </div><div class="line">		if (window.opener.progressWindow)&#123;         </div><div class="line">			window.opener.progressWindow.close();     </div><div class="line">		&#125;     </div><div class="line">		window.close(); </div><div class="line">	&#125;)();-&gt; 函数自执行 </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="优化的方法部分摘录于雅虎军规以及自己的总结"><a href="#优化的方法部分摘录于雅虎军规以及自己的总结" class="headerlink" title="优化的方法部分摘录于雅虎军规以及自己的总结"></a>优化的方法部分摘录于雅虎军规以及自己的总结</h3><ul>
<li>尽可能减少Http请求(图片的优化-&gt;雪碧图，JS，css合并压缩)</li>
<li>使用CDN内容分发网络（放置节点服务器）使用户以最近，最快的获取内容</li>
<li>添加Expire/Cache-Control_http协议常用头部之一</li>
<li>使用Gzip压缩（先放在服务器压缩下）</li>
<li>把CSS放在页面顶部，JS放在页面底部，把css,js外部引用（看情况使用），避免在css中Expression（俗称css表达式）</li>
<li>减少DNS查询</li>
<li>避免重定向，301状态码-&gt;表示用户请求的页面被移动到另外的位置表示永久重定向；</li>
<li>移除重复的脚本</li>
<li>减少DOM的数量 和减少DOM操作 尽量减少Iframe</li>
<li>预加载（图片）和按需加载</li>
<li>单个内容文件不要超过25K</li>
<li>使AJAX 缓存</li>
</ul>
<h3 id="返回到上一页面"><a href="#返回到上一页面" class="headerlink" title="返回到上一页面"></a>返回到上一页面</h3><pre><code>history.back();
window.history.go(-1);//返回上一页不刷新  
window.location.href = document.referrer;//返回上一页并刷新
</code></pre><h3 id="获取当前时间戳"><a href="#获取当前时间戳" class="headerlink" title="获取当前时间戳"></a><strong>获取当前时间戳</strong></h3><pre><code>第一种：var timestamp=new Date().getTime();

第二种：var timestamp = (new Date()).valueOf();

第三种：var timestamp = Date.parse(new Date());
</code></pre><p>第三种：获取的时间戳是把毫秒改成000显示，</p>
<h4 id="时间戳-10-位的精准到秒数，-13位精准到毫秒，在转成系统时间时，我们需要转成13位的。在格式化。"><a href="#时间戳-10-位的精准到秒数，-13位精准到毫秒，在转成系统时间时，我们需要转成13位的。在格式化。" class="headerlink" title="时间戳 10 位的精准到秒数， 13位精准到毫秒，在转成系统时间时，我们需要转成13位的。在格式化。"></a>时间戳 10 位的精准到秒数， 13位精准到毫秒，在转成系统时间时，我们需要转成13位的。在格式化。</h4><h3 id="实现开始时间比结束时间少三个小时"><a href="#实现开始时间比结束时间少三个小时" class="headerlink" title="实现开始时间比结束时间少三个小时"></a>实现开始时间比结束时间少三个小时</h3><h4 id="demo-startTime："><a href="#demo-startTime：" class="headerlink" title="demo-startTime："></a>demo-startTime：</h4><pre><code>var timeNow = new Date().getTime();

var testTwo = new Date(timeNow);

var testTime = testTwo.getFullYear()+&quot;-&quot;+(testTwo.getMonth()+1)+&quot;-&quot;+testTwo.getDate()+&quot; &quot;+testTwo.getHours()+&quot;:&quot;+testTwo.getMinutes()+&quot;:&quot;+testTwo.getSeconds();
</code></pre><h4 id="demo-endTime："><a href="#demo-endTime：" class="headerlink" title="demo-endTime："></a>demo-endTime：</h4><pre><code>var timeEnd = new Date().getTime();

var testTwo = new Date(timeEnd  + 3600 * 3*1000);

var testTime = testTwo.getFullYear()+&quot;-&quot;+(testTwo.getMonth()+1)+&quot;-&quot;+testTwo.getDate()+&quot; &quot;+testTwo.getHours()+&quot;:&quot;+testTwo.getMinutes()+&quot;:&quot;+testTwo.getSeconds();
</code></pre><h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a><strong>解释</strong>：</h3><h4 id="例子里面的几个方法："><a href="#例子里面的几个方法：" class="headerlink" title="例子里面的几个方法："></a>例子里面的几个方法：</h4><pre><code>getFullYear() -&gt; 得到当前的年份；

getMonth() + 1 -&gt; 得到当前的月份；

getDate() -&gt; 得到当前的日期；

....以此类推
</code></pre><h5 id="获取的月份总是比实际当前月份少1-所以要加上一个月-这有JS-函数自身所决定的。"><a href="#获取的月份总是比实际当前月份少1-所以要加上一个月-这有JS-函数自身所决定的。" class="headerlink" title="获取的月份总是比实际当前月份少1,所以要加上一个月,这有JS 函数自身所决定的。"></a>获取的月份总是比实际当前月份少1,所以要加上一个月,这有JS 函数自身所决定的。</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o8cnml828.bkt.clouddn.com/qq,wechat_loginimg.png&quot; alt=&quot;icon&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用window.open(URL,name,features,replace);&lt;a href=&quot;h
    
    </summary>
    
    
      <category term="杂记" scheme="//blog.tcspin.com/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>H5-meta-and-other</title>
    <link href="//blog.tcspin.com/2016/11/30/h5-meta/"/>
    <id>//blog.tcspin.com/2016/11/30/h5-meta/</id>
    <published>2016-11-30T14:10:00.000Z</published>
    <updated>2016-12-01T16:00:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o8cnml828.bkt.clouddn.com/h5-meta.jpg" alt="img"></p>
<h3 id="lt-meta-gt-页面标签"><a href="#lt-meta-gt-页面标签" class="headerlink" title="&lt; meta &gt;页面标签"></a>&lt; meta &gt;页面标签</h3><p>1.静止页面伸缩</p>
<pre><code>&lt; meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no&quot;/&gt;
width=device-width 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边
</code></pre><p>2.优先使用浏览器最新版本</p>
<pre><code>&lt; meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge, chrome=1&quot; /&gt;
</code></pre><p>3.关闭识别电话</p>
<pre><code>&lt; meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;/&gt;
</code></pre><p>4.IOS safair开启拨打电话和短信功能</p>
<pre><code>&lt;a href=&quot;tel:123456&quot;&gt;188194*****&lt;/a&gt;
&lt;a href=&quot;sms:123456&quot;&gt;188194*****&lt;/a&gt;
</code></pre><p>5.Android 邮箱功能</p>
<pre><code>关闭： &lt; meta name=&quot;format-detection&quot; content=&quot;email=no&quot; /&gt;

开启：&lt;a href=&quot;mailto:dooyoe@gmail.com&quot;&gt;dooyoe@gmail.com&lt;/a&gt;
</code></pre><p>同时关闭电话和邮箱识别</p>
<pre><code>&lt; meta content=&quot;telephone=no,email=no&quot;  name=&quot;format-detection&quot; /&gt;
</code></pre><p>6.360读到这个标签进入到极速模式<br>    &lt; meta name=”renderer” content=”webkit”&gt;</p>
<p>7.禁止百度转码</p>
<pre><code>&lt; meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-siteapp&quot; /&gt;
</code></pre><p>8.SEO 优化部分</p>
<h5 id="页面标题-lt-title-gt-标签-head-头部必须"><a href="#页面标题-lt-title-gt-标签-head-头部必须" class="headerlink" title="页面标题&lt; title &gt;标签(head 头部必须)"></a>页面标题&lt; title &gt;标签(head 头部必须)</h5><pre><code>&lt; title&gt;your title&lt;/title&gt;
</code></pre><h5 id="页面关键词-keywords"><a href="#页面关键词-keywords" class="headerlink" title="页面关键词 keywords"></a>页面关键词 keywords</h5><pre><code>&lt; meta name=&quot;keywords&quot; content=&quot;your keywords&quot;&gt;
</code></pre><h5 id="页面描述内容-descriptin"><a href="#页面描述内容-descriptin" class="headerlink" title="页面描述内容 descriptin"></a>页面描述内容 descriptin</h5><pre><code>&lt; meta name=&quot;description&quot; content=&quot;your description&quot;&gt;
</code></pre><h5 id="定义网页作者-author"><a href="#定义网页作者-author" class="headerlink" title="定义网页作者 author"></a>定义网页作者 author</h5><pre><code>&lt; meta name=&quot;author&quot; content=&quot;author,email address&quot;&gt;
</code></pre><h5 id="定义网页搜索引擎索引方式，robotterms-是一组使用英文逗号「-」分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。"><a href="#定义网页搜索引擎索引方式，robotterms-是一组使用英文逗号「-」分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。" class="headerlink" title="定义网页搜索引擎索引方式，robotterms 是一组使用英文逗号「,」分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。"></a>定义网页搜索引擎索引方式，robotterms 是一组使用英文逗号「,」分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。</h5><pre><code>&lt; meta name=&quot;robots&quot; content=&quot;index,follow&quot;&gt;
</code></pre><h3 id="H5-纪录"><a href="#H5-纪录" class="headerlink" title="H5 纪录"></a>H5 纪录</h3><p>1.搜索框问题使得ios 的return键 变成”搜索”</p>
<pre><code>form 标签加上 action=&quot;#&quot; 和 input 加上 type=&quot;search&quot; 属性即可实现ios输入法中的“搜索”键

//去掉input search 自带的关闭按钮和默认边框
input[type=&quot;search&quot;]{
    -webkit-appearance:none;
} 
input::-webkit-search-cancel-button {
    display: none;
}
</code></pre><p>2.ios android 通用字体</p>
<pre><code>font-family: Helvetica;
</code></pre><p>3.去掉点击事件后出现的背景框</p>
<pre><code>-webkit-tap-highlight-color:rgba(0,0,0,0);
</code></pre><p>4.input [type=search] 搜索框右侧小图标美化</p>
<pre><code>input[type=&quot;search&quot;]::-webkit-search-cancel-button{ -webkit-appearance: none;height: 15px; width: 15px;border-radius: 8px;background:url(&quot;images/searchicon.png&quot;) no-repeat 0 0;background-size: 15px 15px;}
</code></pre><h3 id="JS获取浏览器信息："><a href="#JS获取浏览器信息：" class="headerlink" title="JS获取浏览器信息："></a>JS获取浏览器信息：</h3><p><a href="http://www.jianshu.com/users/472a7a879e5a/latest_articles" target="_blank" rel="external">此处摘录于你好小耗子</a></p>
<ul>
<li>浏览器代码名称：navigator.appCodeName</li>
<li>浏览器名称：navigator.appName</li>
<li>浏览器版本号：navigator.appVersion </li>
<li>对Java的支持：navigator.javaEnabled()</li>
<li>MIME类型（数组）：navigator.mimeTypes</li>
<li>系统平台：navigator.platform </li>
<li>插件（数组）：navigator.plugins </li>
<li>用户代理：navigator.userAgent</li>
</ul>
<h2 id="—"><a href="#—" class="headerlink" title="—"></a>—</h2><h3 id="判断屏幕是否旋转（-表示“左”转）"><a href="#判断屏幕是否旋转（-表示“左”转）" class="headerlink" title="判断屏幕是否旋转（-表示“左”转）"></a>判断屏幕是否旋转（-表示“左”转）</h3><pre><code>function orientationChange() { 
    switch(window.orientation) { 　　
        case 0: console.info(&quot;0,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);
        break;
        case -90: console.info(&quot; -90,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height); 
        break; 　　
        case 90: console.info(&quot;90,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);
        break;
        case 180: console.info(&quot; 180,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height); 　　            break;
    };
};
</code></pre><hr>
<h3 id="获取平台类型（一）"><a href="#获取平台类型（一）" class="headerlink" title="获取平台类型（一）"></a>获取平台类型（一）</h3><pre><code>platform : function(){
       var ua = navigator.userAgent.toLowerCase();
       if( ua.indexOf(&apos;macintosh&apos;) &gt; -1){
           return &apos;MacOS&apos;;
       }else if ( ua.indexOf(&apos;iphone&apos;) &gt; -1 || ua.indexOf(&apos;ipad&apos;) &gt; -1 || ua.indexOf(&apos;ios-sdk&apos;) &gt; -1){
           return &apos;IOS&apos;;
       }else if( ua.indexOf(&apos;android&apos;) &gt; -1 || ua.indexOf(&apos;android-sdk&apos;) &gt; -1){
           return &apos;Android&apos;;
       }else if( ua.indexOf(&apos;linux&apos;) &gt; -1){
           return &apos;Linux&apos;;
       }else if( ua.indexOf(&apos;windows&apos;) &gt; -1){
           return &apos;Windows&apos;;
       }
       return &apos;Unknow&apos;;
    },
</code></pre><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><pre><code>var browser = {
    versions: function() {
        var u = navigator.userAgent, app = navigator.appVersion;
        return {//移动终端浏览器版本信息
            trident: u.indexOf(&apos;Trident&apos;) &gt; -1, //IE内核
            presto: u.indexOf(&apos;Presto&apos;) &gt; -1, //opera内核
            webKit: u.indexOf(&apos;AppleWebKit&apos;) &gt; -1, //苹果、谷歌内核
            gecko: u.indexOf(&apos;Gecko&apos;) &gt; -1 &amp;&amp; u.indexOf(&apos;KHTML&apos;) == -1, //火狐内核
            mobile: !!u.match(/AppleWebKit.*Mobile.*/) || !!app.match(/AppleWebKit/), //是否为移动终端
            ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端
            android: u.indexOf(&apos;Android&apos;) &gt; -1 || u.indexOf(&apos;Linux&apos;) &gt; -1, //android终端或者uc浏览器
            iPhone: u.indexOf(&apos;iPhone&apos;) &gt; -1 || u.indexOf(&apos;Mac&apos;) &gt; -1, //是否为iPhone或者QQHD浏览器
            iPad: u.indexOf(&apos;iPad&apos;) &gt; -1, //是否iPad
            webApp: u.indexOf(&apos;Safari&apos;) == -1 //是否web应该程序，没有头部与底部
        };
    }(),
    language: (navigator.browserLanguage || navigator.language).toLowerCase()
};
};
toLowerCase()--&gt;讲字符串的字母转为小写，并返回一个String 类型
</code></pre><h3 id="是否IE"><a href="#是否IE" class="headerlink" title="是否IE"></a>是否IE</h3><pre><code>isIE : function(){
       var myNav = navigator.userAgent.toLowerCase(),
           isIe = false;
        if( myNav.indexOf(&apos;msie&apos;) &gt; -1 || myNav.indexOf(&apos;.net&apos;) &gt; -1) {
            isIe = true;
        }
        return isIe;
    },
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o8cnml828.bkt.clouddn.com/h5-meta.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;lt-meta-gt-页面标签&quot;&gt;&lt;a href=&quot;#lt-meta-gt-页面标签&quot; class=&quot;headerl
    
    </summary>
    
    
      <category term="H5" scheme="//blog.tcspin.com/tags/H5/"/>
    
  </entry>
  
</feed>
