{"title":"tcspin'blog","description":"毕业于职业院校，热爱前端，爱钻研，目标是全栈工程师","language":"zh-Hans","link":"http://yoursite.com","pubDate":"Thu, 01 Dec 2016 11:50:00 GMT","lastBuildDate":"Fri, 02 Dec 2016 16:10:39 GMT","generator":"hexo-generator-json-feed","webMaster":"canxin Zeng","items":[{"title":"pc-window-open","link":"http://yoursite.com/2016/12/01/pc-window-open/","description":"使用window.open(URL,name,features,replace);W3C地址; 用window.open()打开的页面即是这个页面的子页面，他们父子间可以相互执行函数方法。 记得上次有个师弟问我，说怎么解决他登录后跳到成功页面，切刷新父窗口。 我就简单的说下我们这边是怎么实现： 1.图片的登录按钮都是一个a 标签， 页面有有后台（我们是用PHP:tal）给的制定的跳转地址 例如微信： window.open(window.wechat_url,””,”channelmode=yes”); 2.跳转到了这个有二维码的页面后，由后台监听是否成功，如果成功则跳转到一个写有控制父层函数的页面上去. 12345678910&lt;!--关闭子窗口并刷新父窗口--&gt;&lt;script language=\"JavaScript\"&gt; (function() &#123; window.opener.location.href = window.opener.location.href; if (window.opener.progressWindow)&#123; window.opener.progressWindow.close(); &#125; window.close(); &#125;)();-&gt; 函数自执行 &lt;/script&gt; 优化的方法部分摘录于雅虎军规以及自己的总结 尽可能减少Http请求(图片的优化-&gt;雪碧图，JS，css合并压缩) 使用CDN内容分发网络（放置节点服务器）使用户以最近，最快的获取内容 添加Expire/Cache-Control_http协议常用头部之一 使用Gzip压缩（先放在服务器压缩下） 把CSS放在页面顶部，JS放在页面底部，把css,js外部引用（看情况使用），避免在css中Expression（俗称css表达式） 减少DNS查询 避免重定向，301状态码-&gt;表示用户请求的页面被移动到另外的位置表示永久重定向； 移除重复的脚本 减少DOM的数量 和减少DOM操作 尽量减少Iframe 预加载（图片）和按需加载 单个内容文件不要超过25K 使AJAX 缓存 返回到上一页面history.back(); window.history.go(-1);//返回上一页不刷新 window.location.href = document.referrer;//返回上一页并刷新 获取当前时间戳第一种：var timestamp=new Date().getTime(); 第二种：var timestamp = (new Date()).valueOf(); 第三种：var timestamp = Date.parse(new Date()); 第三种：获取的时间戳是把毫秒改成000显示， 时间戳 10 位的精准到秒数， 13位精准到毫秒，在转成系统时间时，我们需要转成13位的。在格式化。实现开始时间比结束时间少三个小时demo-startTime：var timeNow = new Date().getTime(); var testTwo = new Date(timeNow); var testTime = testTwo.getFullYear()+&quot;-&quot;+(testTwo.getMonth()+1)+&quot;-&quot;+testTwo.getDate()+&quot; &quot;+testTwo.getHours()+&quot;:&quot;+testTwo.getMinutes()+&quot;:&quot;+testTwo.getSeconds(); demo-endTime：var timeEnd = new Date().getTime(); var testTwo = new Date(timeEnd + 3600 * 3*1000); var testTime = testTwo.getFullYear()+&quot;-&quot;+(testTwo.getMonth()+1)+&quot;-&quot;+testTwo.getDate()+&quot; &quot;+testTwo.getHours()+&quot;:&quot;+testTwo.getMinutes()+&quot;:&quot;+testTwo.getSeconds(); 解释：例子里面的几个方法：getFullYear() -&gt; 得到当前的年份； getMonth() + 1 -&gt; 得到当前的月份； getDate() -&gt; 得到当前的日期； ....以此类推 获取的月份总是比实际当前月份少1,所以要加上一个月,这有JS 函数自身所决定的。","pubDate":"Thu, 01 Dec 2016 11:50:00 GMT","guid":"http://yoursite.com/2016/12/01/pc-window-open/","category":"杂记"},{"title":"H5-meta-and-other","link":"http://yoursite.com/2016/11/30/h5-meta/","description":"&lt; meta &gt;页面标签1.静止页面伸缩 &lt; meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no&quot;/&gt; width=device-width 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 2.优先使用浏览器最新版本 &lt; meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge, chrome=1&quot; /&gt; 3.关闭识别电话 &lt; meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;/&gt; 4.IOS safair开启拨打电话和短信功能 &lt;a href=&quot;tel:123456&quot;&gt;188194*****&lt;/a&gt; &lt;a href=&quot;sms:123456&quot;&gt;188194*****&lt;/a&gt; 5.Android 邮箱功能 关闭： &lt; meta name=&quot;format-detection&quot; content=&quot;email=no&quot; /&gt; 开启：&lt;a href=&quot;mailto:dooyoe@gmail.com&quot;&gt;dooyoe@gmail.com&lt;/a&gt; 同时关闭电话和邮箱识别 &lt; meta content=&quot;telephone=no,email=no&quot; name=&quot;format-detection&quot; /&gt; 6.360读到这个标签进入到极速模式 &lt; meta name=”renderer” content=”webkit”&gt; 7.禁止百度转码 &lt; meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-siteapp&quot; /&gt; 8.SEO 优化部分 页面标题&lt; title &gt;标签(head 头部必须)&lt; title&gt;your title&lt;/title&gt; 页面关键词 keywords&lt; meta name=&quot;keywords&quot; content=&quot;your keywords&quot;&gt; 页面描述内容 descriptin&lt; meta name=&quot;description&quot; content=&quot;your description&quot;&gt; 定义网页作者 author&lt; meta name=&quot;author&quot; content=&quot;author,email address&quot;&gt; 定义网页搜索引擎索引方式，robotterms 是一组使用英文逗号「,」分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。&lt; meta name=&quot;robots&quot; content=&quot;index,follow&quot;&gt; H5 纪录1.搜索框问题使得ios 的return键 变成”搜索” form 标签加上 action=&quot;#&quot; 和 input 加上 type=&quot;search&quot; 属性即可实现ios输入法中的“搜索”键 //去掉input search 自带的关闭按钮和默认边框 input[type=&quot;search&quot;]{ -webkit-appearance:none; } input::-webkit-search-cancel-button { display: none; } 2.ios android 通用字体 font-family: Helvetica; 3.去掉点击事件后出现的背景框 -webkit-tap-highlight-color:rgba(0,0,0,0); 4.input [type=search] 搜索框右侧小图标美化 input[type=&quot;search&quot;]::-webkit-search-cancel-button{ -webkit-appearance: none;height: 15px; width: 15px;border-radius: 8px;background:url(&quot;images/searchicon.png&quot;) no-repeat 0 0;background-size: 15px 15px;} JS获取浏览器信息：此处摘录于你好小耗子 浏览器代码名称：navigator.appCodeName 浏览器名称：navigator.appName 浏览器版本号：navigator.appVersion 对Java的支持：navigator.javaEnabled() MIME类型（数组）：navigator.mimeTypes 系统平台：navigator.platform 插件（数组）：navigator.plugins 用户代理：navigator.userAgent —判断屏幕是否旋转（-表示“左”转）function orientationChange() { switch(window.orientation) { case 0: console.info(&quot;0,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height); break; case -90: console.info(&quot; -90,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height); break; case 90: console.info(&quot;90,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height); break; case 180: console.info(&quot; 180,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height); break; }; }; 获取平台类型（一）platform : function(){ var ua = navigator.userAgent.toLowerCase(); if( ua.indexOf(&apos;macintosh&apos;) &gt; -1){ return &apos;MacOS&apos;; }else if ( ua.indexOf(&apos;iphone&apos;) &gt; -1 || ua.indexOf(&apos;ipad&apos;) &gt; -1 || ua.indexOf(&apos;ios-sdk&apos;) &gt; -1){ return &apos;IOS&apos;; }else if( ua.indexOf(&apos;android&apos;) &gt; -1 || ua.indexOf(&apos;android-sdk&apos;) &gt; -1){ return &apos;Android&apos;; }else if( ua.indexOf(&apos;linux&apos;) &gt; -1){ return &apos;Linux&apos;; }else if( ua.indexOf(&apos;windows&apos;) &gt; -1){ return &apos;Windows&apos;; } return &apos;Unknow&apos;; }, 浏览器var browser = { versions: function() { var u = navigator.userAgent, app = navigator.appVersion; return {//移动终端浏览器版本信息 trident: u.indexOf(&apos;Trident&apos;) &gt; -1, //IE内核 presto: u.indexOf(&apos;Presto&apos;) &gt; -1, //opera内核 webKit: u.indexOf(&apos;AppleWebKit&apos;) &gt; -1, //苹果、谷歌内核 gecko: u.indexOf(&apos;Gecko&apos;) &gt; -1 &amp;&amp; u.indexOf(&apos;KHTML&apos;) == -1, //火狐内核 mobile: !!u.match(/AppleWebKit.*Mobile.*/) || !!app.match(/AppleWebKit/), //是否为移动终端 ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端 android: u.indexOf(&apos;Android&apos;) &gt; -1 || u.indexOf(&apos;Linux&apos;) &gt; -1, //android终端或者uc浏览器 iPhone: u.indexOf(&apos;iPhone&apos;) &gt; -1 || u.indexOf(&apos;Mac&apos;) &gt; -1, //是否为iPhone或者QQHD浏览器 iPad: u.indexOf(&apos;iPad&apos;) &gt; -1, //是否iPad webApp: u.indexOf(&apos;Safari&apos;) == -1 //是否web应该程序，没有头部与底部 }; }(), language: (navigator.browserLanguage || navigator.language).toLowerCase() }; }; toLowerCase()--&gt;讲字符串的字母转为小写，并返回一个String 类型 是否IEisIE : function(){ var myNav = navigator.userAgent.toLowerCase(), isIe = false; if( myNav.indexOf(&apos;msie&apos;) &gt; -1 || myNav.indexOf(&apos;.net&apos;) &gt; -1) { isIe = true; } return isIe; },","pubDate":"Wed, 30 Nov 2016 14:10:00 GMT","guid":"http://yoursite.com/2016/11/30/h5-meta/","category":"H5"}]}