[{"title":"解决遇到的问题","date":"2017-03-07T16:00:00.000Z","path":"2017/03/08/repost/","text":"使用zclip 实现复制功能1、父层元素不能为display: none; 2、且要在有本地服务器或者线上的状态，才能调试 监听H5微信页面的返回事件在页面中我们可以使用JavaScript window history，后退到前面页面，但是由于安全原因javascript不允许修改history里已有的url链接，但可以使用pushState方法往history里增加url链接，并且提供popstate事件监测从history栈里弹出url。既然有提供popstate事件监测，那么我们就可以进行监听。 &lt;script type=&quot;text/javascript&quot;&gt; (function(){ // alert(2); // 在微信下histpry的方法下 pushHistory(); var bool=false; setTimeout(function(){ bool=true; },1500); window.addEventListener(&quot;popstate&quot;, function(e) { if(bool) { window.location.href = document.referrer//根据自己的需求实现自己的功能 } pushHistory(); }, false); //设置url 为# 时会刷新页面 function pushHistory() { var state = { title: &quot;title&quot;, url: &quot;#&quot; }; window.history.pushState(state, &quot;title&quot;, &quot;#&quot;); } })(); &lt;/script&gt;","comments":true,"tags":[{"name":"other","slug":"other","permalink":"//blog.tcspin.com/tags/other/"}]},{"title":"","date":"2017-03-01T14:51:31.000Z","path":"2017/03/01/about_v2/","text":"个人信息 曾灿心/男/1992年 个人网站：http://blog.tcspin.com github: https://github.com/zengAlex 期望职位：Web前端开发工程师 期望城市：广深 2016年6月-毕业于广东工贸职业技术学院-软件工程专业 联系方式 手机：18819478704 邮箱：1019552800@qq.com 工作经历广州欢拓网络科技有限公司（2015年7月至今） 前端开发工程师 开讲课堂（前端负责人）（2016.06月至今） - 主要参与项目方案的制定和跟主管商讨前期技术的准备，负责开讲项目的移动端H5开发，PC Web端开发，为每个独立的讲师搭建一个知识变现的平台（因为人手不够，这些都是我自己写的）。 1. 使用GitLab 对代码进行管理； 2. 使用sea.js 实现JS模块化； 3. 使用tmod.js 实现前端模板预编译，用less预编译处理css； 4. 使用gulp 来实现对js,css文件的压缩和制作雪碧图； 5. 使用animate.css + js 使用一些交互效果； 6. 使用MacDown来写 md文档，每个项目写清楚文档方便与后台对接。 开讲H5活动页 （2017.01.20 - 2017.01.22） - 项目主要让用户上传10秒的新年地方特色视频集 1.使用sea.js，对js 文件的模块化管理； 2.为了体验更好，使用ajax先把数据请求回来，再进行拆分，封装成一个数组，每次加载都是本地的资源，减少了对服务器的请求，用户的体验也大大加快了。 直播页PC/H5端 功能模块的开发 （2016.03 - 2016.04） - 为直播页定制一些功能模块如（打赏、抽奖、评分模块） 1.使用less 预处理模块化CSS文件； 2.使用预编译模板tmod.js 处理功能模块； 3.每个模块的设计都是解耦的互不影响，需要到就template 进来。 使得页面的加载速度有很好的提升，用户体验也更好，代码的维护成本相对降低了很多。 新版PC/H5 官网（2015.12 - 2016.01） 根据设计图，设计页面结构，主要参与用户体验的设计、交互设计与实现。 1.采用H5新属性实现页面标签结构，使用CSS3动画实现页面部分效果； 2.所有大图都必须先进行保真压缩，icon 全部合并成 sprite图； 3.使用SVN管理代码； 重构PC开发后台（2015.09 - 2015.10） 1.把页面结构解耦，分拆为多个模块，公用的地方拆分为宏模块； 2.使用gulp 压缩JS,生成sprite图片，合并css,减少请求； 3.优化代码结构，尽量减少页面DOM，优化meta标签，提高SEO。 4.用CSS3实现动画 专业技能 熟悉W3C标准，能书写语义合理，易维护的HTML结构，代码整洁，注释清晰。 熟用Fiddler，Chrome，nproxy 调试工具。 处理过多种浏览器兼容问题，对性能优化，功能模块组件化和模板分离都有较好的实践。 熟练掌握HTML5/CSS3/JQuery, zepto。 擅于使用gulp做自动化处理。 熟练使用SCSS,LESS等预处理工具。 用sea.js开发过多个项目。 用Vue+webpack+vue 产品使用帮助中心。 熟练使用git和SVN工具来进行协同工作。 会使用Sketch，PhotoShop，图片处理软件，有一定审美能力 了解并能使用Ajax 了解SEO的重要性。 了解和使用过node.js,主要用于搭建本地服务器和爬虫。 作品展示 http://www.talk-fun.com/ 欢拓官网（PC/H5） http://kai.talk-fun.com/activity/newyear 新年活动专页（限移动端访问） http://open.talk-fun.com/ 开发后台 兴趣爱好 喜欢分享，相信在为别人讲解的过程中也能提升自己。 喜欢看书，技术类，漫画类，心理类。 热爱设计，喜欢阅读各类设计相关杂志和书籍;热爱运动，喜欢打篮球。 自我描述 做事认真、负责、注重细节、有点强迫症，喜欢钻研新技术，喜欢跟同事讨论和分享心得，工作时最看重的是团队的合作，才能让工作高效率化。 展望 目前除了在加强基础能力外，还在自学Electron、PHP和素描，希望能更加丰富自己的生活，做一只积极向上的的程序猿。 致谢感谢您花时间阅读我的简历，期待能有机会和您共事，共同经历。","comments":true,"tags":[]},{"title":"css","date":"2017-01-15T16:00:00.000Z","path":"2017/01/16/css/","text":"媒体查询 (media)// 横屏 @media screen and (orientation:landscape){ } // 竖屏 @media screen and (orientation:portrait){ } // 窗口宽度&lt;960,设计宽度=768 @media screen and (max-width:959px){ } // 窗口宽度&lt;768,设计宽度=640 @media screen and (max-width:767px){ } // 窗口宽度&lt;640,设计宽度=480 @media screen and (max-width:639px){ } // 窗口宽度&lt;480,设计宽度=320 @media screen and (max-width:479px){ } // windows UI 贴靠 @media screen and (-ms-view-state:snapped){ } // 打印 @media print{ }","comments":true,"tags":[{"name":"css","slug":"css","permalink":"//blog.tcspin.com/tags/css/"}]},{"title":"regExp","date":"2016-12-29T15:44:00.000Z","path":"2016/12/29/regExp/","text":"正则表达式（regular expression）缩写：regexp regex 正则用途 字符的匹配／搜索／替换 数据验证 正则记录1. /^[1-9]\\d*$/ //匹配正整数 2. /[^\\d^\\.]+/; //匹配非数字的 demo&lt;input id=&quot;input-val&quot; /&gt; //去除非数字符号 $(&quot;#input-val&quot;).on(&quot;keyup&quot;, function(){ var regx = /^[1-9]\\d*$/; //匹配数字 var str = /[^\\d^\\.]+/; //匹配非数字 if( !regx.test($(this).val()) ){ var rVal = $(this).val().replace(str,&apos;&apos;); $(this).val(rVal); } });","comments":true,"tags":[{"name":"正则","slug":"正则","permalink":"//blog.tcspin.com/tags/正则/"}]},{"title":"gulp 合并压缩css文件","date":"2016-12-17T16:00:00.000Z","path":"2016/12/18/gulp-css-concat/","text":"首先需要安装npm 插件 npm install gulp-concat gulp-rename .. –save-dev 直接贴代码var gulp = require(&apos;gulp&apos;); var concat = require(&apos;gulp-concat&apos;); // 文件合并 var minifycss = require(&apos;gulp-minify-css&apos;); // css 压缩 var rename = require(&apos;gulp-rename&apos;); // 文件更名 var watch = require(&apos;gulp-watch&apos;); //文件监听 var notify = require(&apos;gulp-notify&apos;); //提示信息 // 合并压缩css 文件 gulp .task(&apos;concatCss&apos;, function(){ return gulp.src([&apos;../source/css/normalize.css&apos;,&apos;../source/css/menu.css&apos;,&apos;../source/css/header.css&apos;]) .pipe(concat(&apos;index.css&apos;)) .pipe(gulp.dest(&apos;../dist/css&apos;)) .pipe(rename({ suffix: &apos;.min&apos; })) .pipe(minifycss()) .pipe(gulp.dest(&apos;../dist/css&apos;)) .pipe(notify({ message: &apos;css index is ok&apos; })); }); 以下解释下这些 代码 1.gulp.src 引入文件, 里面可以是一个数组，也可以直接引入一个目录下的所有文件，如gulp.src(images/*.css),引入所有images 目录下的所有css 文件 2.pipe(concat(‘index’)), 把所有的文件合并为一个index.css 文件 3.pipe(gulp.dest(‘../dist/css’)) 把合并后的文件放在dist文件夹的css文件夹下 4.pipe(minifycss()) 把合并后的文件进行压缩。 5.pipe(notify({message: ‘string’})) 作一个提示","comments":true,"tags":[{"name":"前端自动化","slug":"前端自动化","permalink":"//blog.tcspin.com/tags/前端自动化/"}]},{"title":"gulp-css-sprite","date":"2016-12-14T15:21:00.000Z","path":"2016/12/14/gulp-css-sprite/","text":"1. 先建立好目录文件夹，例如我的在build 下2.建立一个package.json 文件（前提是你已经全局安装好了node和全局安装了gulp),你也可以npm init 到该目录下，他会有些选项要你添，填完到保存，就会自动生成一个package.json 3. 建立gulpfile.jsgulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件（你也可以k将gulpfile.js放入其他文件夹下亦可）。 1.合并img 文件夹下到所有icon 小图标 首先在gulpfile.js 里面引入gulp 和 gulp.spritesmith, 贴上代码 //gulpfile.js var gulp = require(&apos;gulp&apos;); var spritesmith = require(&apos;gulp.spritesmith&apos;); // 合并压缩成雪碧图 gulp.task(&apos;spritesmith&apos;, function() { return gulp.src(&apos;../source/img/imgsprite/*.png&apos;)//需要合并的图片地址 .pipe(spritesmith({ imgName: &apos;sprite.png&apos;,//保存合并后图片的名字 cssName: &apos;sprite.css&apos;,//保存合并后对于css样式的地址 padding: 5,//合并时两个图片的间距 algorithm: &apos;top-down&apos; })) .pipe(gulp.dest(&apos;../dist/images/&apos;)); // 输出到 }); gulp.spritesmith - api 这里我就简单的说下，详细的自己去看下 地址 options imagepath 必填项，sprite背景图源文件夹，只有匹配此路径才会处理，默认 images/slice/ imagepath_map 映射CSS中背景路径，支持函数和数组，默认为 null spritedest 必填项，雪碧图输出目录，注意，会覆盖之前文件！默认 images/ spritepath 必填项，替换后的背景路径，默认 ../images/ padding 可选项，指定各图片间间距，默认 0 useimageset 可选项，是否使用 image-set 作为2x图片实现，默认不使用 spritestamp 可选项，是否给雪碧图追加时间戳，默认不追加 cssstamp 可选项，是否在CSS文件末尾追加时间戳，默认不追加 engine 可选项，指定图像处理引擎，默认选择pngsmith algorithm 可选项，指定排列方式，有top-down （从上至下）, left-right（从左至右）, diagonal（从左上至右下）, alt-diagonal （从左下至右上）和 binary-tree（二叉树排列） 五种供选择，默认 binary-tree；参考 Layout algorithm：他有5个方向 如下图","comments":true,"tags":[{"name":"前端自动化","slug":"前端自动化","permalink":"//blog.tcspin.com/tags/前端自动化/"}]},{"title":"学习 http","date":"2016-12-04T06:12:00.000Z","path":"2016/12/04/http-Knowledge/","text":"1 常见的http 方法 get post put head delete 2 常见的状态码 200 表示成功，文档正确返回 203 Redirect －重定向，需要的到其它地方去获取这个资源｜ 404 not found，无法获取资源｜ 状态码分类 整体范围 已定义范围 分类 100~199 100~101 信息提示 200～299｜200~206 成功 300~399 300~305 重定向 400~499 400~415 客户端错误 500~599 500~505 服务器错误 3 报文 request message(请求报文) 由web客户端发往服务器端 response message(响应报文) 由服务器端发往客户端的报文","comments":true,"tags":[{"name":"http","slug":"http","permalink":"//blog.tcspin.com/tags/http/"}]},{"title":"pc-window-open","date":"2016-12-01T11:50:00.000Z","path":"2016/12/01/pc-window-open/","text":"使用window.open(URL,name,features,replace);W3C地址; 用window.open()打开的页面即是这个页面的子页面，他们父子间可以相互执行函数方法。 记得上次有个师弟问我，说怎么解决他登录后跳到成功页面，切刷新父窗口。 我就简单的说下我们这边是怎么实现： 1.图片的登录按钮都是一个a 标签， 页面有有后台（我们是用PHP:tal）给的制定的跳转地址 例如微信： window.open(window.wechat_url,””,”channelmode=yes”); 2.跳转到了这个有二维码的页面后，由后台监听是否成功，如果成功则跳转到一个写有控制父层函数的页面上去. 12345678910&lt;!--关闭子窗口并刷新父窗口--&gt;&lt;script language=\"JavaScript\"&gt; (function() &#123; window.opener.location.href = window.opener.location.href; if (window.opener.progressWindow)&#123; window.opener.progressWindow.close(); &#125; window.close(); &#125;)();-&gt; 函数自执行 &lt;/script&gt; 优化的方法部分摘录于雅虎军规以及自己的总结 尽可能减少Http请求(图片的优化-&gt;雪碧图，JS，css合并压缩) 使用CDN内容分发网络（放置节点服务器）使用户以最近，最快的获取内容 添加Expire/Cache-Control_http协议常用头部之一 使用Gzip压缩（先放在服务器压缩下） 把CSS放在页面顶部，JS放在页面底部，把css,js外部引用（看情况使用），避免在css中Expression（俗称css表达式） 减少DNS查询 避免重定向，301状态码-&gt;表示用户请求的页面被移动到另外的位置表示永久重定向； 移除重复的脚本 减少DOM的数量 和减少DOM操作 尽量减少Iframe 预加载（图片）和按需加载 单个内容文件不要超过25K 使AJAX 缓存 返回到上一页面history.back(); window.history.go(-1);//返回上一页不刷新 window.location.href = document.referrer;//返回上一页并刷新 获取当前时间戳第一种：var timestamp=new Date().getTime(); 第二种：var timestamp = (new Date()).valueOf(); 第三种：var timestamp = Date.parse(new Date()); 第三种：获取的时间戳是把毫秒改成000显示， 时间戳 10 位的精准到秒数， 13位精准到毫秒，在转成系统时间时，我们需要转成13位的。在格式化。实现开始时间比结束时间少三个小时demo-startTime：var timeNow = new Date().getTime(); var testTwo = new Date(timeNow); var testTime = testTwo.getFullYear()+&quot;-&quot;+(testTwo.getMonth()+1)+&quot;-&quot;+testTwo.getDate()+&quot; &quot;+testTwo.getHours()+&quot;:&quot;+testTwo.getMinutes()+&quot;:&quot;+testTwo.getSeconds(); demo-endTime：var timeEnd = new Date().getTime(); var testTwo = new Date(timeEnd + 3600 * 3*1000); var testTime = testTwo.getFullYear()+&quot;-&quot;+(testTwo.getMonth()+1)+&quot;-&quot;+testTwo.getDate()+&quot; &quot;+testTwo.getHours()+&quot;:&quot;+testTwo.getMinutes()+&quot;:&quot;+testTwo.getSeconds(); 解释：例子里面的几个方法：getFullYear() -&gt; 得到当前的年份； getMonth() + 1 -&gt; 得到当前的月份； getDate() -&gt; 得到当前的日期； ....以此类推 获取的月份总是比实际当前月份少1,所以要加上一个月,这有JS 函数自身所决定的。","comments":true,"tags":[{"name":"杂记","slug":"杂记","permalink":"//blog.tcspin.com/tags/杂记/"}]},{"title":"H5-meta-and-other","date":"2016-11-30T14:10:00.000Z","path":"2016/11/30/h5-meta/","text":"&lt; meta &gt;页面标签1.静止页面伸缩 &lt; meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no&quot;/&gt; width=device-width 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 2.优先使用浏览器最新版本 &lt; meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge, chrome=1&quot; /&gt; 3.关闭识别电话 &lt; meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;/&gt; 4.IOS safair开启拨打电话和短信功能 &lt;a href=&quot;tel:123456&quot;&gt;188194*****&lt;/a&gt; &lt;a href=&quot;sms:123456&quot;&gt;188194*****&lt;/a&gt; 5.Android 邮箱功能 关闭： &lt; meta name=&quot;format-detection&quot; content=&quot;email=no&quot; /&gt; 开启：&lt;a href=&quot;mailto:dooyoe@gmail.com&quot;&gt;dooyoe@gmail.com&lt;/a&gt; 同时关闭电话和邮箱识别 &lt; meta content=&quot;telephone=no,email=no&quot; name=&quot;format-detection&quot; /&gt; 6.360读到这个标签进入到极速模式 &lt; meta name=”renderer” content=”webkit”&gt; 7.禁止百度转码 &lt; meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-siteapp&quot; /&gt; 8.SEO 优化部分 页面标题&lt; title &gt;标签(head 头部必须)&lt; title&gt;your title&lt;/title&gt; 页面关键词 keywords&lt; meta name=&quot;keywords&quot; content=&quot;your keywords&quot;&gt; 页面描述内容 descriptin&lt; meta name=&quot;description&quot; content=&quot;your description&quot;&gt; 定义网页作者 author&lt; meta name=&quot;author&quot; content=&quot;author,email address&quot;&gt; 定义网页搜索引擎索引方式，robotterms 是一组使用英文逗号「,」分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。&lt; meta name=&quot;robots&quot; content=&quot;index,follow&quot;&gt; H5 纪录1.搜索框问题使得ios 的return键 变成”搜索” form 标签加上 action=&quot;#&quot; 和 input 加上 type=&quot;search&quot; 属性即可实现ios输入法中的“搜索”键 //去掉input search 自带的关闭按钮和默认边框 input[type=&quot;search&quot;]{ -webkit-appearance:none; } input::-webkit-search-cancel-button { display: none; } 2.ios android 通用字体 font-family: Helvetica; 3.去掉点击事件后出现的背景框 -webkit-tap-highlight-color:rgba(0,0,0,0); 4.input [type=search] 搜索框右侧小图标美化 input[type=&quot;search&quot;]::-webkit-search-cancel-button{ -webkit-appearance: none;height: 15px; width: 15px;border-radius: 8px;background:url(&quot;images/searchicon.png&quot;) no-repeat 0 0;background-size: 15px 15px;} JS获取浏览器信息：此处摘录于你好小耗子 浏览器代码名称：navigator.appCodeName 浏览器名称：navigator.appName 浏览器版本号：navigator.appVersion 对Java的支持：navigator.javaEnabled() MIME类型（数组）：navigator.mimeTypes 系统平台：navigator.platform 插件（数组）：navigator.plugins 用户代理：navigator.userAgent —判断屏幕是否旋转（-表示“左”转）function orientationChange() { switch(window.orientation) { case 0: console.info(&quot;0,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height); break; case -90: console.info(&quot; -90,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height); break; case 90: console.info(&quot;90,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height); break; case 180: console.info(&quot; 180,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height); break; }; }; 获取平台类型（一）platform : function(){ var ua = navigator.userAgent.toLowerCase(); if( ua.indexOf(&apos;macintosh&apos;) &gt; -1){ return &apos;MacOS&apos;; }else if ( ua.indexOf(&apos;iphone&apos;) &gt; -1 || ua.indexOf(&apos;ipad&apos;) &gt; -1 || ua.indexOf(&apos;ios-sdk&apos;) &gt; -1){ return &apos;IOS&apos;; }else if( ua.indexOf(&apos;android&apos;) &gt; -1 || ua.indexOf(&apos;android-sdk&apos;) &gt; -1){ return &apos;Android&apos;; }else if( ua.indexOf(&apos;linux&apos;) &gt; -1){ return &apos;Linux&apos;; }else if( ua.indexOf(&apos;windows&apos;) &gt; -1){ return &apos;Windows&apos;; } return &apos;Unknow&apos;; }, 浏览器var browser = { versions: function() { var u = navigator.userAgent, app = navigator.appVersion; return {//移动终端浏览器版本信息 trident: u.indexOf(&apos;Trident&apos;) &gt; -1, //IE内核 presto: u.indexOf(&apos;Presto&apos;) &gt; -1, //opera内核 webKit: u.indexOf(&apos;AppleWebKit&apos;) &gt; -1, //苹果、谷歌内核 gecko: u.indexOf(&apos;Gecko&apos;) &gt; -1 &amp;&amp; u.indexOf(&apos;KHTML&apos;) == -1, //火狐内核 mobile: !!u.match(/AppleWebKit.*Mobile.*/) || !!app.match(/AppleWebKit/), //是否为移动终端 ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端 android: u.indexOf(&apos;Android&apos;) &gt; -1 || u.indexOf(&apos;Linux&apos;) &gt; -1, //android终端或者uc浏览器 iPhone: u.indexOf(&apos;iPhone&apos;) &gt; -1 || u.indexOf(&apos;Mac&apos;) &gt; -1, //是否为iPhone或者QQHD浏览器 iPad: u.indexOf(&apos;iPad&apos;) &gt; -1, //是否iPad webApp: u.indexOf(&apos;Safari&apos;) == -1 //是否web应该程序，没有头部与底部 }; }(), language: (navigator.browserLanguage || navigator.language).toLowerCase() }; }; toLowerCase()--&gt;讲字符串的字母转为小写，并返回一个String 类型 是否IEisIE : function(){ var myNav = navigator.userAgent.toLowerCase(), isIe = false; if( myNav.indexOf(&apos;msie&apos;) &gt; -1 || myNav.indexOf(&apos;.net&apos;) &gt; -1) { isIe = true; } return isIe; },","comments":true,"tags":[{"name":"H5","slug":"H5","permalink":"//blog.tcspin.com/tags/H5/"}]}]